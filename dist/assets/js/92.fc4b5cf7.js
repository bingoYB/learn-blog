(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{532:function(s,t,a){"use strict";a.r(t);var n=a(19),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"词法作用域-vs-动态作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#词法作用域-vs-动态作用域"}},[s._v("#")]),s._v(" 词法作用域 VS 动态作用域")]),s._v(" "),a("p",[a("strong",[s._v("通常来说，一段程序代码中所用到的名字并不总是有效／可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("词法作用域")]),s._v("，也叫"),a("strong",[s._v("静态作用域")]),s._v("，它的作用域是指在词法分析阶段就确定了，不会改变。"),a("strong",[s._v("动态作用域")]),s._v("是在运行时根据程序的流程信息来动态确定的，而不是在写代码时进行静态确定的。")]),s._v(" "),a("p",[s._v("以下面这段Javascript代码来说明词法作用域和动态作用域，但是你要明白，阐述的概念是与Javascript无关的。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 会输出2还是3？")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("如果是词法作用域，它会让 "),a("code",[s._v("foo()")]),s._v(" 函数引用到全局作用域中的 "),a("code",[s._v("a")]),s._v("，因此会输出 "),a("code",[s._v("2")]),s._v("。我们说过，词法作用域是写代码的时候就静态确定下来的。Javascript中的作用域就是词法作用域（"),a("strong",[s._v("事实上大部分语言都是基于词法作用域的")]),s._v("），所以这段代码在浏览器中运行的结果是输出 "),a("code",[s._v("2")])]),s._v(" "),a("p",[s._v("而动态作用域并不关心函数和作用域是如何声明以及在何处声明的，只关心它们从"),a("strong",[s._v("何处调用")]),s._v("。换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。因此，如果Javascript具有动态作用域，理论上输出结果是 "),a("code",[s._v("3")]),s._v("。")]),s._v(" "),a("p",[s._v("为什么会这样？因为当 "),a("code",[s._v("foo()")]),s._v(" 无法找到 "),a("code",[s._v("a")]),s._v(" 的变量引用时，会顺着调用栈在调用 "),a("code",[s._v("foo()")]),s._v(" 的地方查找 "),a("code",[s._v("a")]),s._v(" ，而不是在嵌套的词法作用域链中向上查找。由于 "),a("code",[s._v("foo()")]),s._v(" 是在 "),a("code",[s._v("bar()")]),s._v(" 中调用的，引擎会检查 "),a("code",[s._v("bar()")]),s._v(" 的作用域，并在其中找到值为 "),a("code",[s._v("3")]),s._v(" 的变量 "),a("code",[s._v("a")]),s._v("。")]),s._v(" "),a("p",[s._v("你可能会觉得很奇怪，但这其实是因为你可能只写过基于词法作用域的代码（或者至少以词法作用域为基础进行了深入的思考），因此对动态作用域感到陌生。如果你只用基于动态作用域的语言写过代码，就会觉得这是很自然的，而词法作用域看上去才怪怪的。")]),s._v(" "),a("p",[s._v("需要明确的是，Javascript并不具有动态作用域，它只有词法作用域，简单明了。但是，它的 "),a("code",[s._v("eval()")]),s._v("、"),a("code",[s._v("with")]),s._v("、"),a("code",[s._v("this")]),s._v("机制某种程度上很像动态作用域，使用上要特别注意。")]),s._v(" "),a("p",[s._v("主要区别："),a("strong",[s._v("词法作用域是在写代码或者定义时确定的，而动态作用域是在运行时确定的（this也是！）。词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用")]),s._v("。")]),s._v(" "),a("h4",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.jianshu.com/p/70b38c7ab69c",target:"_blank",rel:"noopener noreferrer"}},[s._v("词法作用域 VS 动态作用域 - 简书 (jianshu.com)"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{371:function(t,s,a){t.exports=a.p+"assets/img/image-20210317151643602.a2a99eac.png"},372:function(t,s,a){t.exports=a.p+"assets/img/http_proxy.9956d058.png"},373:function(t,s,a){t.exports=a.p+"assets/img/proxy_1.14139fe8.png"},404:function(t,s,a){"use strict";a.r(s);var _=a(19),v=Object(_.a)({},(function(){var t=this,s=t.$createElement,_=t._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"http协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http协议"}},[t._v("#")]),t._v(" HTTP协议")]),t._v(" "),_("blockquote",[_("p",[t._v("http 协议在哪一层")])]),t._v(" "),_("p",[_("strong",[t._v("ISO/OSI估计标准组织定义")]),t._v("：应用层 表示层 会话层 传输层  网络层 数据链路层 物理层")]),t._v(" "),_("p",[_("strong",[t._v("TCP/IP")])]),t._v(" "),_("p",[t._v("应用层：为用户提供服务 http ftp dns smtp")]),t._v(" "),_("p",[t._v("传输层：为应用层实体提供端到端的通信功能，保证数据包的顺序传送及数据的完整性（TCP/UDP）")]),t._v(" "),_("p",[t._v("网络层：IP协议 解决主机到主机的通信问题")]),t._v(" "),_("p",[t._v("网络接口层（数据链路层 ：比特信号转成光信号/电信号；物理层）：监视数据在主机与网络间交换")]),t._v(" "),_("h3",{attrs:{id:"http工作过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http工作过程"}},[t._v("#")]),t._v(" http工作过程")]),t._v(" "),_("p",[t._v("一次http操作称为一个事务")]),t._v(" "),_("p",[t._v("1、客户端与服务器建立TCP连接")]),t._v(" "),_("p",[t._v("2、客户端发送请求给服务器")]),t._v(" "),_("p",[t._v("3、服务器接到请求给出响应")]),t._v(" "),_("p",[t._v("4、客户端收到信息展示到浏览器中，然后断开连接")]),t._v(" "),_("h3",{attrs:{id:"http缓存机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http缓存机制"}},[t._v("#")]),t._v(" http缓存机制")]),t._v(" "),_("p",[t._v("强缓存与协商缓存")]),t._v(" "),_("h3",{attrs:{id:"常用头字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用头字段"}},[t._v("#")]),t._v(" 常用头字段")]),t._v(" "),_("h3",{attrs:{id:"常见返回状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常见返回状态"}},[t._v("#")]),t._v(" 常见返回状态")]),t._v(" "),_("h3",{attrs:{id:"http1-1存在的问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http1-1存在的问题"}},[t._v("#")]),t._v(" http1.1存在的问题")]),t._v(" "),_("h3",{attrs:{id:"https"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),_("h4",{attrs:{id:"秘钥交换算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#秘钥交换算法"}},[t._v("#")]),t._v(" 秘钥交换算法")]),t._v(" "),_("p",[t._v("1）Alice与Bob确定两个大素数n和g，这两个数不用保密")]),t._v(" "),_("p",[t._v("（2）Alice选择另一个大随机数x，并计算A如下：A=gx mod n")]),t._v(" "),_("p",[t._v("（3）Alice将A发给Bob")]),t._v(" "),_("p",[t._v("（4）Bob选择另一个大随机数y，并计算B如下：B=gy mod n")]),t._v(" "),_("p",[t._v("（5）Bob将B发给Alice")]),t._v(" "),_("p",[t._v("（6）计算秘密密钥K1如下：K1=Bx mod n")]),t._v(" "),_("p",[t._v("（7）计算秘密密钥K2如下：K2=Ay mod n K1=K2，因此Alice和Bob可以用其进行加解密")]),t._v(" "),_("h4",{attrs:{id:"https加密过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https加密过程"}},[t._v("#")]),t._v(" https加密过程")]),t._v(" "),_("p",[t._v("认证服务器。浏览器内置一个受信任的CA机构列表，并保存了这些CA机构的证书。第一阶段服务器会提供经CA机构认证颁发的服务器证书，如果认证该服务器证书的CA机构，存在于浏览器的受信任CA机构列表中，并且服务器证书中的信息与当前正在访问的网站（域名等）一致，那么浏览器就认为服务端是可信的，并从服务器证书中取得服务器公钥，用于后续流程。否则，浏览器将提示用户，根据用户的选择，决定是否继续。当然，我们可以管理这个受信任CA机构列表，添加我们想要信任的CA机构，或者移除我们不信任的CA机构。")]),t._v(" "),_("p",[t._v("协商会话密钥。客户端在认证完服务器，获得服务器的公钥之后，利用该公钥与服务器进行加密通信，协商出两个会话密钥，分别是用于加密客户端往服务端发送数据的客户端会话密钥，用于加密服务端往客户端发送数据的服务端会话密钥。在已有服务器公钥，可以加密通讯的前提下，还要协商两个对称密钥的原因，是因为非对称加密相对复杂度更高，在数据传输过程中，使用对称加密，可以节省计算资源。另外，会话密钥是随机生成，每次协商都会有不一样的结果，所以安全性也比较高。")]),t._v(" "),_("p",[t._v("加密通讯。此时客户端服务器双方都有了本次通讯的会话密钥，之后传输的所有Http数据，都通过会话密钥加密。这样网路上的其它用户，将很难窃取和篡改客户端和服务端之间传输的数据，从而保证了数据的私密性和完整性。")]),t._v(" "),_("p",[t._v("https协议 SSL协议 TLS协议、握手协议的关系")]),t._v(" "),_("p",[t._v("https 基于ssl的http协议")]),t._v(" "),_("p",[t._v("SSL协议是一种记录协议，扩展性良好，可以方便添加子协议")]),t._v(" "),_("p",[t._v("握手协议是SSL的一个子协议")]),t._v(" "),_("p",[t._v("TLS是SSL的后续版本")]),t._v(" "),_("h4",{attrs:{id:"tls握手过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tls握手过程"}},[t._v("#")]),t._v(" TLS握手过程")]),t._v(" "),_("ol",[_("li",[t._v("ClientHello：客户端发送所支持的 SSL/TLS 最高协议版本号和所支持的加密算法集合及压缩方法集合等信息给 服务器端。")]),t._v(" "),_("li",[t._v("ServerHello：服务器端收到客户端信息后，选定双方都能够支持的 SSL/TLS 协议版本和加密方法及压缩方法， 返回给客户端。")]),t._v(" "),_("li",[t._v("SendCertificate（可选）：服务器端发送服务端证书给客户端。")]),t._v(" "),_("li",[t._v("RequestCertificate（可选）：如果选择双向验证，服务器端向客户端请求客户端证书")]),t._v(" "),_("li",[t._v("ServerHelloDone：服务器端通知客户端初始协商结束。")]),t._v(" "),_("li",[t._v("ResponseCertificate（可选）：如果选择双向验证，客户端向服务器端发送客户端证书。")]),t._v(" "),_("li",[t._v("ClientKeyExchange：客户端使用服务器端的公钥，对客户端公钥和密钥种子进行加密，再发送给服务器端。")]),t._v(" "),_("li",[t._v("CertificateVerify（可选）：如果选择双向验证，客户端用本地私钥生成数字签名，并发送给服务器端，让其通 过收到的客户端公钥进行身份验证。")]),t._v(" "),_("li",[t._v("CreateSecretKey：通讯双方基于密钥种子等信息生成通讯密钥。")]),t._v(" "),_("li",[t._v("ChangeCipherSpec：客户端通知服务器端已将通讯方式切换到加密模式。")]),t._v(" "),_("li",[t._v("Finished：客户端做好加密通讯的准备。")]),t._v(" "),_("li",[t._v("ChangeCipherSpec：服务器端通知客户端已将通讯方式切换到加密模式。")]),t._v(" "),_("li",[t._v("Finished：服务器做好加密通讯的准备。")]),t._v(" "),_("li",[t._v("Encrypted/DecryptedData：双方使用客户端密钥，通过对称加密算法对通讯内容进行加密。")]),t._v(" "),_("li",[t._v("ClosedConnection：通讯结束后，任何一方发出断开 SSL 连接的消息。")])]),t._v(" "),_("h3",{attrs:{id:"http2协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http2协议"}},[t._v("#")]),t._v(" HTTP2协议")]),t._v(" "),_("h4",{attrs:{id:"特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点：")]),t._v(" "),_("p",[t._v("​\t1、使用二进制格式传输，更高效，更紧凑；原本是用ASCII码进行传输，也就是纯文本，对于大的纯数字的时候，二进制格式占用容器更小")]),t._v(" "),_("p",[t._v("​\t2、报头压缩，降低开销")]),t._v(" "),_("p",[t._v("​\t3、多路复用，一个网络连接实现并行请求")]),t._v(" "),_("p",[t._v("​\t4、服务器主动推送，减少请求的延迟")]),t._v(" "),_("p",[t._v("​\t5、默认使用加密")]),t._v(" "),_("h4",{attrs:{id:"二进制分帧层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二进制分帧层"}},[t._v("#")]),t._v(" "),_("strong",[t._v("二进制分帧层")])]),t._v(" "),_("p",[t._v("HTTP2定义了如何封装HTTP消息在客户端与服务端的传输")]),t._v(" "),_("p",[t._v("在1.1之前的模型中，HTTP消息是一串文本，以换行符作为请求头请求体的分隔符，而HTTP2则对HTTP消息进行了封装，把头与数据分成了两个更小的二进制格式数据帧。这个”层“是位于套接字接口与应用的HTTP API之间的一个优化的新编码机制，所以对应用使用不影响。")]),t._v(" "),_("h4",{attrs:{id:"多路复用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[t._v("#")]),t._v(" "),_("strong",[t._v("多路复用")]),t._v("：")]),t._v(" "),_("p",[t._v("在1.1中，客户端想要发起多个并行请求，必须使用多个TCP连接，这种模式会导致队首阻塞，降低连接效率。")]),t._v(" "),_("p",[t._v("HTTP2则将消息分解成一个一个的独立数据帧，交错发送，接收端再将帧重组成HTTP消息。")]),t._v(" "),_("p",[t._v("特点：1、交错发送多个请求，互不影响；2、并行交错发送多个响应，互不干扰；3、使用一个TCP连接发送多个请求和响应；4、消除不必要的延迟和提高现有网络容量的利用率；")]),t._v(" "),_("h4",{attrs:{id:"服务器推送"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务器推送"}},[t._v("#")]),t._v(" "),_("strong",[t._v("服务器推送")]),t._v("：")]),t._v(" "),_("p",[t._v("服务端可以对一个客户端请求发送多个响应。")]),t._v(" "),_("p",[_("strong",[t._v("场景")]),t._v("：服务器已经知道客户端下一步要请求什么资源，这时候服务推送即可派上用场")]),t._v(" "),_("p",[t._v("推送资源可进行以下处理：")]),t._v(" "),_("p",[t._v("客户端缓存")]),t._v(" "),_("p",[t._v("不同页面复用")]),t._v(" "),_("p",[t._v("与其他资源复用")]),t._v(" "),_("p",[t._v("由服务端设定优先级")]),t._v(" "),_("p",[t._v("被客户端拒绝")]),t._v(" "),_("p",[t._v("服务器推送有一个很麻烦的问题。所要推送的资源文件，如果浏览器已经有缓存，推送就是浪费带宽。即使推送的文件版本更新，浏览器也会优先使用本地缓存。")]),t._v(" "),_("p",[t._v("一种解决办法是，只对第一次访问的用户开启服务器推送。下面是 Nginx 官方给出的示例，根据 Cookie 判断是否为第一次访问。")]),t._v(" "),_("div",{staticClass:"language-yml line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-yml"}},[_("code",[t._v("\nserver "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen 443 ssl http2 default_server;\n\n    ssl_certificate ssl/certificate.pem;\n    ssl_certificate_key ssl/key.pem;\n\n    root /var/www/html;\n    http2_push_preload on;\n\n    location = /demo.html "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        add_header Set"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('Cookie "session=1";\n        add_header Link $resources;\n    '),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\nmap $http_cookie $resources "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v('\n    "~'),_("span",{pre:!0,attrs:{class:"token important"}},[t._v('*session=1"')]),t._v(' "";\n    default "</style.css'),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v('; as=style; rel=preload";\n'),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br"),_("span",{staticClass:"line-number"},[t._v("7")]),_("br"),_("span",{staticClass:"line-number"},[t._v("8")]),_("br"),_("span",{staticClass:"line-number"},[t._v("9")]),_("br"),_("span",{staticClass:"line-number"},[t._v("10")]),_("br"),_("span",{staticClass:"line-number"},[t._v("11")]),_("br"),_("span",{staticClass:"line-number"},[t._v("12")]),_("br"),_("span",{staticClass:"line-number"},[t._v("13")]),_("br"),_("span",{staticClass:"line-number"},[t._v("14")]),_("br"),_("span",{staticClass:"line-number"},[t._v("15")]),_("br"),_("span",{staticClass:"line-number"},[t._v("16")]),_("br"),_("span",{staticClass:"line-number"},[t._v("17")]),_("br"),_("span",{staticClass:"line-number"},[t._v("18")]),_("br"),_("span",{staticClass:"line-number"},[t._v("19")]),_("br"),_("span",{staticClass:"line-number"},[t._v("20")]),_("br"),_("span",{staticClass:"line-number"},[t._v("21")]),_("br")])]),_("h4",{attrs:{id:"伪头字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#伪头字段"}},[t._v("#")]),t._v(" "),_("strong",[t._v("伪头字段")])]),t._v(" "),_("p",[t._v("http2内置了几个特殊的已“:”开始的key，用以替代HTTP/1.x中请求行/响应行的信息")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v(":method  请求方法\n:scheme 请求协议\n:authority 请求域名\n:path 请求地址\n\n:status 响应状态\n\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br"),_("span",{staticClass:"line-number"},[t._v("7")]),_("br")])]),_("p",[_("img",{attrs:{src:a(371),alt:"image-20210317151643602"}})]),t._v(" "),_("h5",{attrs:{id:"存在的缺点-其实是tcp的缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#存在的缺点-其实是tcp的缺点"}},[t._v("#")]),t._v(" 存在的缺点（其实是tcp的缺点）")]),t._v(" "),_("ul",[_("li",[t._v("tcp 以及tcp+tls建立连接延时，两个握手延时")]),t._v(" "),_("li",[t._v("tcp队头阻塞：队头阻塞会导致 HTTP/2 在更容易丢包的弱网络环境下比 HTTP/1.1 更慢")])]),t._v(" "),_("h5",{attrs:{id:"http1-x存在的缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http1-x存在的缺点"}},[t._v("#")]),t._v(" http1.x存在的缺点")]),t._v(" "),_("p",[t._v("1.请求阻塞 如上已清晰说明")]),t._v(" "),_("p",[t._v("2.以明文文本字符串的形式传输内容，存在安全问题")]),t._v(" "),_("p",[t._v("3.http 请求头无状态特性 导致传输效率低下\n多个http请求头大部分信息是相同的，重复传输，导致宽带浪费.请求头多达几百字节，而请求主体却只有十几个字节，有效信息比很低。")]),t._v(" "),_("p",[t._v("4.只能浏览器主动请求响应，不能服务器主动推送信息过来")]),t._v(" "),_("h3",{attrs:{id:"http-3特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-3特点"}},[t._v("#")]),t._v(" HTTP 3特点")]),t._v(" "),_("ul",[_("li",[t._v("减少了握手的延迟（1-RTT 或 0-RTT）")]),t._v(" "),_("li",[t._v("多路复用，并且没有 TCP 的阻塞问题")]),t._v(" "),_("li",[t._v("连接迁移，（主要是在客户端）当由 Wifi 转移到 4G 时，连接不会被断开")])]),t._v(" "),_("p",[t._v("HTTP 3与HTTP 1.1和HTTP 2没有直接的关系，也不是http2的扩展")]),t._v(" "),_("p",[t._v("HTTP 3将会是一个全新的WEB协议")]),t._v(" "),_("p",[t._v("HTTP 3目前处于制订和测试阶段")]),t._v(" "),_("p",[t._v("https://www.chromium.org/quic")]),t._v(" "),_("h3",{attrs:{id:"http与代理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http与代理"}},[t._v("#")]),t._v(" HTTP与代理")]),t._v(" "),_("p",[_("img",{attrs:{src:a(372),alt:"http3"}})]),t._v(" "),_("h4",{attrs:{id:"正向代理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#正向代理"}},[t._v("#")]),t._v(" 正向代理")]),t._v(" "),_("p",[t._v("正向代理代理一般是指代理客户端，为客户端收发请求，使真实客户端对服务器不可见")]),t._v(" "),_("h4",{attrs:{id:"反向代理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[t._v("#")]),t._v(" 反向代理")]),t._v(" "),_("p",[t._v("反向代理是代理服务器端，为服务器收发请求，使真实服务器对客户端不可见")]),t._v(" "),_("h4",{attrs:{id:"反向代理的用途"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#反向代理的用途"}},[t._v("#")]),t._v(" 反向代理的用途")]),t._v(" "),_("ul",[_("li",[t._v("加密和SSL加速")]),t._v(" "),_("li",[t._v("负载均衡")]),t._v(" "),_("li",[t._v("缓存静态内容")]),t._v(" "),_("li",[t._v("压缩")]),t._v(" "),_("li",[t._v("减速上传")]),t._v(" "),_("li",[t._v("安全")]),t._v(" "),_("li",[t._v("外网发布")])]),t._v(" "),_("h4",{attrs:{id:"反向代理做负载均衡"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#反向代理做负载均衡"}},[t._v("#")]),t._v(" 反向代理做负载均衡")]),t._v(" "),_("p",[t._v("反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源。同时，用户不需要知道目标服务器的地址，也无须在用户端作任何设定。反向代理服务器通常可用来作为Web加速，即使用反向代理作为Web服务器的前置机来降低网络和服务器的负载，提高访问效率;")]),t._v(" "),_("p",[_("img",{attrs:{src:a(373),alt:"http3"}})])])}),[],!1,null,null,null);s.default=v.exports}}]);
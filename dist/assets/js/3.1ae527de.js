(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{416:function(t,e,r){t.exports=r.p+"assets/img/browser_structure8.70f6e1ea.png"},417:function(t,e,r){t.exports=r.p+"assets/img/browser_simple_workflow-2d0e702b575f29ec96473c91d08862b7.b03ab827.png"},418:function(t,e,r){t.exports=r.p+"assets/img/browser_workflow-08efb76c5a48fde5f0c40f3ff72624f1.5bfd3830.png"},419:function(t,e,r){t.exports=r.p+"assets/img/chrome_architecture-ffd69b40c3fc0372925b451d97c4ddac.77ee2836.png"},420:function(t,e,r){t.exports=r.p+"assets/img/chrome_renderer_prscess-1d9b9a1bb9d1743b4506e67f73e99f49.929e80d4.png"},421:function(t,e,r){t.exports=r.p+"assets/img/v2-71ef343b6a7b8ad7cf8aebbda44e77fd_720w.e0924b6b.jpg"},422:function(t,e,r){t.exports=r.p+"assets/img/v2-36ed368865ab9363706d57c66058b697_720w.0cc986eb.jpg"},423:function(t,e,r){t.exports=r.p+"assets/img/v2-ccaacbf35961ff61f30be90ac5b1be10_720w.eccd3a0f.jpg"},424:function(t,e,r){t.exports=r.p+"assets/img/v2-390e7945e6d578f61a96aadd14837c60_720w.aea2f1e8.jpg"},425:function(t,e,r){t.exports=r.p+"assets/img/v2-f256433f72ea22db26e4baa02cecac19_r.00e82292.jpg"},426:function(t,e,r){t.exports=r.p+"assets/img/v2-0e9c2c1761f084689a984a86866fc85d_720w.a1ba9e7f.jpg"},427:function(t,e,r){t.exports=r.p+"assets/img/v2-2fd68d4d3e0fff48d8a27d1ad72c7d65_720w.b1cb1863.jpg"},428:function(t,e,r){t.exports=r.p+"assets/img/render-tree-construction.0c389301.png"},429:function(t,e,r){t.exports=r.p+"assets/img/2014_05_04_02.2b170338.gif"},430:function(t,e,r){t.exports=r.p+"assets/img/bro5.09d8c607.png"},431:function(t,e,r){t.exports=r.p+"assets/img/bro4.cfd98577.png"},432:function(t,e,r){t.exports=r.p+"assets/img/bro1.c893e7e4.png"},433:function(t,e,r){t.exports=r.p+"assets/img/bro2.1def7a99.png"},434:function(t,e,r){t.exports=r.p+"assets/img/bro3.dc8b24ef.png"},536:function(t,e,r){"use strict";r.r(e);var s=r(19),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器工作原理"}},[t._v("#")]),t._v(" 浏览器工作原理")]),t._v(" "),s("h3",{attrs:{id:"浏览器结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器结构"}},[t._v("#")]),t._v(" 浏览器结构")]),t._v(" "),s("p",[s("img",{attrs:{src:r(416),alt:"browser_structure"}})]),t._v(" "),s("ul",[s("li",[t._v("用户界面（User Interface）")]),t._v(" "),s("li",[t._v("浏览器引擎（Browser Engine）")]),t._v(" "),s("li",[t._v("渲染引擎（Rendering Engine）")]),t._v(" "),s("li",[t._v("网络（Networking）")]),t._v(" "),s("li",[t._v("XML解析器（XML Parser）")]),t._v(" "),s("li",[t._v("显示后端（Display Backend）")]),t._v(" "),s("li",[t._v("数据持久层（Data Persistence）")])]),t._v(" "),s("h3",{attrs:{id:"常见渲染引擎"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见渲染引擎"}},[t._v("#")]),t._v(" 常见渲染引擎")]),t._v(" "),s("p",[t._v("渲染引擎：能够能够将HTML/CSS/JavaScript文本及相应的资源文件转换成图像结果")]),t._v(" "),s("p",[t._v("渲染引擎的种类")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("渲染引擎")]),t._v(" "),s("th",[t._v("浏览器")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Trident")]),t._v(" "),s("td",[t._v("IE、Edge(旧)")])]),t._v(" "),s("tr",[s("td",[t._v("Gecko")]),t._v(" "),s("td",[t._v("Firefox")])]),t._v(" "),s("tr",[s("td",[t._v("WebKit")]),t._v(" "),s("td",[t._v("Safari")])]),t._v(" "),s("tr",[s("td",[t._v("Blink(WebKit fork)")]),t._v(" "),s("td",[t._v("Chromium/Chrome，Opera，Edge(新)")])])])]),t._v(" "),s("h3",{attrs:{id:"工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工作流程"}},[t._v("#")]),t._v(" 工作流程")]),t._v(" "),s("p",[t._v("简单流程")]),t._v(" "),s("p",[s("img",{attrs:{src:r(417),alt:"browser_simple_workflow"}})]),t._v(" "),s("p",[t._v("详细流程")]),t._v(" "),s("p",[s("img",{attrs:{src:r(418),alt:"browser_workflow"}})]),t._v(" "),s("h3",{attrs:{id:"浏览器的多进程架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的多进程架构"}},[t._v("#")]),t._v(" 浏览器的多进程架构")]),t._v(" "),s("p",[s("img",{attrs:{src:r(419),alt:"chrome_architecture"}})]),t._v(" "),s("p",[t._v("Browser：控制程序的“chrome”部分，包括地址栏，书签，后退和前进按钮。还处理Web浏览器的不可见的，和特权部分，例如网络请求和文件访问")]),t._v(" "),s("p",[t._v("Renderer：负责显示网站的选项卡内的所有内容")]),t._v(" "),s("p",[t._v("Plugin：控制网站使用的所有插件，例如flash")]),t._v(" "),s("p",[t._v("GPU：独立于其他进程的GPU处理任务。 它被分成多个不同的进程，因为GPU处理来自多个程序的请求并将它们绘制在同一个面中")]),t._v(" "),s("h3",{attrs:{id:"渲染进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程"}},[t._v("#")]),t._v(" 渲染进程")]),t._v(" "),s("p",[t._v("渲染器进程负责选项卡内发生的所有事情。 在渲染器进程中，主线程处理你为用户编写的大部分代码")]),t._v(" "),s("p",[t._v("如果你使用了web worker 或 service worker，有时JavaScript代码的一部分将由工作线程处理。 排版和栅格线程也在渲染器进程内运行，以便高效、流畅地呈现页面")]),t._v(" "),s("p",[s("img",{attrs:{src:r(420),alt:"chrome_renderer_prscess"}})]),t._v(" "),s("h4",{attrs:{id:"渲染过程-解析部分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染过程-解析部分"}},[t._v("#")]),t._v(" 渲染过程 ：解析部分")]),t._v(" "),s("p",[s("img",{attrs:{src:r(421),alt:"img"}})]),t._v(" "),s("h5",{attrs:{id:"html解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#html解析"}},[t._v("#")]),t._v(" html解析")]),t._v(" "),s("p",[t._v("第一步（解析）：从网络或者磁盘下读取的HTML原始字节码，通过设置的charset编码，转换成相字符")]),t._v(" "),s("p",[s("img",{attrs:{src:r(422),alt:"img"}})]),t._v(" "),s("p",[t._v("第二步（token化）：通过词法分析器，将字符串解析成Token，Token中会标注出当前的Token是"),s("code",[t._v("开始标签")]),t._v("，还是"),s("code",[t._v("结束标签")]),t._v("，或者"),s("code",[t._v("文本标签")]),t._v("等。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(423),alt:"img"}})]),t._v(" "),s("p",[t._v("第三步（生成Nodes并构建DOM树）：浏览器会根据Tokens里记录的"),s("code",[t._v("开始标签")]),t._v("，"),s("code",[t._v("结束标签")]),t._v("，将Tokens之间相互串联起来*（带有结束标签的Token不会生成Node）*。")]),t._v(" "),s("blockquote",[s("p",[t._v("Token："),s("strong",[t._v("标记")]),t._v("，词法分析是计算机科学中将字符序列转换为"),s("strong",[t._v("标记")]),t._v("（token）序列的过程。从输入字符流中生成标记的过程叫作"),s("strong",[t._v("标记化")]),t._v("（tokenization），在这个过程中，"),s("a",{attrs:{href:"https://baike.baidu.com/item/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/4336210",target:"_blank",rel:"noopener noreferrer"}},[t._v("词法分析器"),s("OutboundLink")],1),t._v("还会对标记进行分类。")])]),t._v(" "),s("p",[t._v("Node包含了这个节点的所有属性。例如"),s("code",[t._v('<img src="xxx.png" >')]),t._v("标签最终生成出的节点对象中会保存图片地址等信息。\n事实上，在构建DOM树时，不是要等所有的Tokens都转换成Nodes后才开始，而是一边生成Token一边采取"),s("code",[t._v("深度遍历算法")]),t._v("消耗Token来生成Node，如下图所示：")]),t._v(" "),s("p",[t._v("图中有颜色的小数字代表构建的具体步骤，可以看出，首先生成出"),s("code",[t._v("html Token")]),t._v(",并消耗Token创建出"),s("code",[t._v("html 节点对象")]),t._v("，接着生成"),s("code",[t._v("head Token")]),t._v("并消耗Token创建出"),s("code",[t._v("head节点对象")]),t._v("......，当所有的Tokens都消耗完了，紧接着DOM树也就构建完了。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(424),alt:"img"}})]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("1.词法分析是将字符流(char stream)转换为记号流(token stream)")])]),t._v(" "),s("p",[s("em",[t._v("2.语法分析成 AST (Abstract Syntax Tree) 在HTML中就构建DOM节点，生成DOM树")])])]),t._v(" "),s("h5",{attrs:{id:"子资源加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#子资源加载"}},[t._v("#")]),t._v(" 子资源加载")]),t._v(" "),s("blockquote",[s("p",[t._v("注意JavaScript可以阻止解析")])]),t._v(" "),s("p",[t._v("在构建DOM树中遇到css资源、图片、script脚本资源时进行网络加载")]),t._v(" "),s("h5",{attrs:{id:"css解析-样式表计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css解析-样式表计算"}},[t._v("#")]),t._v(" css解析，样式表计算")]),t._v(" "),s("p",[t._v("DOM会记录页面的内容，但是浏览器还需要知道这些内容该用什么样式去展示，所以还需要构建CSSOMTree。CSSOM的生成过程和DOM的生成过程十分相似，也是：1.解析，2.Token化，3.生成Nodes并构建CSSOMTree：")]),t._v(" "),s("p",[t._v("假设浏览器收到了下面这样一段css:")]),t._v(" "),s("div",{staticClass:"language-css line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("body")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 16px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("p")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-weight")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bold"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("p span")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("none"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("span")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" red"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("img")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("最终会生成如下的CSSOMTree:")]),t._v(" "),s("p",[s("img",{attrs:{src:r(425),alt:"preview"}})]),t._v(" "),s("p",[t._v("官方对CSSOM构建给的一种解释：")]),t._v(" "),s("blockquote",[s("p",[t._v("未构建完的CSSOMTree是不准确的，浏览器必须等到CSSOMTree构建完毕后才能进入下一阶段。\n所以，CSS的加载速度与构建CSSOMTree的速度将直接影响首屏渲染速度，因此在默认情况下CSS被视为阻塞渲染的资源，需要将它尽早、尽快地下载到客户端，以便缩短首次渲染的时间。")])]),t._v(" "),s("p",[t._v("同理，JS也会可以修改CSS样式，影响CSSOMTree最终的结果。而我们前面提到，不完整的CSSOMTree是不可以被使用的，如果JS试图在"),s("strong",[t._v("浏览器还未完成CSSOMTree的下载和构建")]),t._v("时去操作CSS样式，浏览器会"),s("strong",[t._v("暂停脚本的运行和DOM的构建")]),t._v("，直至浏览器完成了CSSOM的下载和构建。也就是说，"),s("strong",[t._v("JS脚本的出现会让CSSOM的构建阻塞DOM的构建")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("平时谈及页面性能优化，经常会强调css文件应该放在html文档中的前面引入，js文件应该放在后面引入，这么做的原因是什么呢？")])]),t._v(" "),s("p",[t._v("如果JS放在前面，那么js执行时间与css执行时间会阻塞DOM树的构建")]),t._v(" "),s("p",[s("img",{attrs:{src:r(426),alt:"img"}})]),t._v(" "),s("p",[t._v("那如果我们把css放到前面，js放到最后引入时，构建时间会变成：")]),t._v(" "),s("p",[s("img",{attrs:{src:r(427),alt:"img"}})]),t._v(" "),s("h5",{attrs:{id:"布局-渲染-布局树构建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布局-渲染-布局树构建"}},[t._v("#")]),t._v(" 布局：渲染/布局树构建")]),t._v(" "),s("p",[t._v("DOM/CSSOM树本身并不能直接用于排版和渲染，浏览器还会生成另外一棵树：Render树。")]),t._v(" "),s("p",[t._v("将CSSOM应用到DOM树中每一个元素上，形成RenderTree")]),t._v(" "),s("p",[s("img",{attrs:{src:r(428),alt:"将 DOM 与 CSSOM 合并以形成渲染树"}})]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Render 树上的每一个节点被称为："),s("code",[t._v("RenderObject")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("RenderObject跟 DOM 节点几乎是一一对应的，当一个"),s("code",[t._v("可见的 DOM 节点")]),t._v("被添加到 DOM 树上时，内核就会为它生成对应的 RenderOject 添加到 Render 树上。")])]),t._v(" "),s("li",[s("p",[t._v("其中，可见的DOM节点不包括：")]),t._v(" "),s("ul",[s("li",[t._v("一些不会体现在渲染输出中的节点（"),s("code",[t._v("<html><script><link>….")]),t._v("），会直接被忽略掉。")]),t._v(" "),s("li",[t._v("通过CSS隐藏的节点。例如上图中的"),s("code",[t._v("span")]),t._v("节点，因为有一个CSS显式规则在该节点上设置了"),s("code",[t._v("display:none")]),t._v("属性，那么它在生成RenderObject时会被直接忽略掉。")])])])]),t._v(" "),s("h5",{attrs:{id:"分层-layer图层树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分层-layer图层树"}},[t._v("#")]),t._v(" 分层：Layer图层树")]),t._v(" "),s("blockquote",[s("p",[t._v("浏览器渲染引擎并不是直接使用Render树进行绘制，为了方便处理"),s("strong",[t._v("Positioning,Clipping,Overflow-scroll,CSS Transfrom/Opacrity/Animation/Filter,Mask or Reflection,Z-index")]),t._v("等属性，浏览器需要生成另外一棵树："),s("strong",[t._v("Layer树 （ 层级树）")])])]),t._v(" "),s("p",[t._v("RenderLayer树是基于Render树建立起来的一颗新的树。同样，RenderLayer节点和Render节点不是一一对应关系，而是一对多的关系。")]),t._v(" "),s("p",[t._v("浏览器会为一些"),s("strong",[t._v("特定")]),t._v("的"),s("code",[t._v("RenderObject")]),t._v("生成对应的"),s("code",[t._v("RenderLayer")]),t._v("，其中的规则是：")]),t._v(" "),s("ul",[s("li",[t._v("是否是页面的根节点 document节点与html节点 "),s("em",[t._v("It’s the root object for the page")])]),t._v(" "),s("li",[t._v("是否有css的一些布局属性（relative absolute or a transform) "),s("em",[t._v("It has explicit CSS position properties (relative, absolute or a transform)")])]),t._v(" "),s("li",[t._v("是否透明 "),s("em",[t._v("It is transparent")])]),t._v(" "),s("li",[t._v("是否有溢出 "),s("em",[t._v("Has overflow, an alpha mask or reflection")])]),t._v(" "),s("li",[t._v("是否有css滤镜 "),s("em",[t._v("Has a CSS filter")])]),t._v(" "),s("li",[t._v("是否包含一个canvas元素使得节点拥有视图上下文 "),s("em",[t._v("Corresponds to canvas element that has a 3D (WebGL) context or an accelerated 2D context")])]),t._v(" "),s("li",[t._v("是否包含一个video元素 "),s("em",[t._v("Corresponds to a video element")])])]),t._v(" "),s("p",[t._v("为了直观了解这三种树，下图给出了这三种树及其它们之间的对应关系。")]),t._v(" "),s("img",{staticStyle:{zoom:"150%"},attrs:{src:r(429),alt:"img"}}),t._v(" "),s("h5",{attrs:{id:"paint-绘制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#paint-绘制"}},[t._v("#")]),t._v(" Paint 绘制")]),t._v(" "),s("p",[t._v("在绘制阶段，主线程会遍历布局树（layout tree），生成一系列的绘画记录（paint records）。并将其提交到合成线程。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(430),alt:"image-20210322163500605"}})]),t._v(" "),s("h4",{attrs:{id:"渲染过程-合成部分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染过程-合成部分"}},[t._v("#")]),t._v(" 渲染过程：合成部分")]),t._v(" "),s("h5",{attrs:{id:"分块、光栅化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分块、光栅化"}},[t._v("#")]),t._v(" 分块、光栅化")]),t._v(" "),s("p",[t._v("**光栅化：**把文档的结构、元素的样式、几何 形状和绘制顺序转换为屏幕上的像素称为光栅化，这个操作会提交到GPU进程进行工作")]),t._v(" "),s("p",[s("strong",[t._v("合成")]),t._v("是一种将页面的各个部分分层，分别栅格化，并在一个被称为合成器线程的独立线程中合成为页面的技术。")]),t._v(" "),s("p",[t._v("合成线程会根据视口viewport将图层(Layer) 切分为一块又一块的小图块（tiles），之后将这些小图块分别进行发送给一系列光栅线程（raster threads）进行光栅化，结束后光栅线程会将每个图块的光栅结果存在"),s("code",[t._v("GPU Process")]),t._v("的内存中。")]),t._v(" "),s("p",[t._v("为了优化显示体验，合成线程可以给不同的光栅线程赋予不同的优先级，将那些在视口中的或者视口附近的层先被光栅化。")]),t._v(" "),s("h5",{attrs:{id:"合成与显示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合成与显示"}},[t._v("#")]),t._v(" 合成与显示")]),t._v(" "),s("p",[t._v("⼀旦所有图块都被光栅化， 合成线程就会⽣成⼀个绘制图块的命令⸺“DrawQuad” ， 然后将该命令通过IPC提交给浏览器进程。 浏览器进程⾥⾯有⼀个叫 viz 的组件， ⽤来接收合成线程发过来的 DrawQuad 命 令， 然后根据 DrawQuad 命令， 将其⻚⾯内容绘制到内存中， 最后再将内存显⽰在屏幕上。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(431),alt:"image-20210322162906930"}})]),t._v(" "),s("h4",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("渲染主线程")]),t._v(" "),s("ol",[s("li",[t._v("渲染进程将 HTML 内容转换为能够读懂的 DOM 树结构。")]),t._v(" "),s("li",[t._v("渲染引擎将 CSS 样式表转化为浏览器可以理解的 styleSheets， 计算出 DOM 节点的样式。")]),t._v(" "),s("li",[t._v("创建布局树， 并计算元素的布局信息。")]),t._v(" "),s("li",[t._v("对布局树进⾏分层， 并⽣成分层树。")]),t._v(" "),s("li",[t._v("绘制（Paint）：为每个图层⽣成绘制列表， 并将其提交到合成线程。")])]),t._v(" "),s("p",[t._v("合成线程")]),t._v(" "),s("ol",[s("li",[t._v("合成线程将图层分成图块， 并在光栅化线程池中将图块转换成位图。")]),t._v(" "),s("li",[t._v("合成线程发送绘制图块命令 DrawQuad 给浏览器进程。")]),t._v(" "),s("li",[t._v("浏览器进程根据 DrawQuad 消息⽣成⻚⾯， 并显⽰到显⽰器上。")])]),t._v(" "),s("h3",{attrs:{id:"浏览器对事件的处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器对事件的处理"}},[t._v("#")]),t._v(" 浏览器对事件的处理")]),t._v(" "),s("p",[t._v("当页面渲染完毕以后，TAB内已经显示出了可交互的WEB页面，用户可以进行移动鼠标、点击页面等操作了，而当这些事件发生时候，浏览器是如何处理这些事件的呢？")]),t._v(" "),s("p",[t._v("以点击事件（click event）为例，让鼠标点击页面时候，首先接受到事件信息的是"),s("code",[t._v("Browser Process")]),t._v("，但是Browser Process只知道事件发生的类型和发生的位置，具体怎么对这个点击事件进行处理，还是由Tab内的"),s("code",[t._v("Renderer Process")]),t._v("进行的。Browser Process接受到事件后，随后便把事件的信息传递给了渲染进程，渲染进程会找到根据事件发生的坐标，找到目标对象（target），并且运行这个目标对象的点击事件绑定的监听函数（listener）。")]),t._v(" "),s("h3",{attrs:{id:"渲染进程中合成器线程接收事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程中合成器线程接收事件"}},[t._v("#")]),t._v(" 渲染进程中合成器线程接收事件")]),t._v(" "),s("p",[t._v("前面我们说到，合成器线程可以独立于主线程之外通过已光栅化的层创建组合帧，例如页面滚动，如果没有对页面滚动绑定相关的事件，组合器线程可以独立于主线程创建组合帧，如果页面绑定了页面滚动事件，合成器线程会等待主线程进行事件处理后才会创建组合帧。那么，合成器线程是如何判断出这个事件是否需要路由给主线程处理的呢？")]),t._v(" "),s("p",[t._v("由于执行 JS 是主线程的工作，当页面合成时，合成器线程会标记页面中绑定有事件处理器的区域为"),s("code",[t._v("非快速滚动区域")]),t._v("(non-fast scrollable region)，如果事件发生在这些存在标注的区域，合成器线程会把事件信息发送给主线程，等待主线程进行事件处理，如果事件不是发生在这些区域，合成器线程则会直接合成新的帧而不用等到主线程的响应。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(432),alt:"非快速滚动区域有用户事件发生"}})]),t._v(" "),s("h3",{attrs:{id:"浏览器对事件的优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器对事件的优化"}},[t._v("#")]),t._v(" 浏览器对事件的优化")]),t._v(" "),s("p",[t._v("一般我们屏幕的帧率是每秒60帧，也就是60fps，但是某些事件触发的频率超过了这个数值，比如wheel，mousewheel，mousemove，pointermove，touchmove，这些连续性的事件一般每秒会触发60~120次，假如每一次触发事件都将事件发送到主线程处理，由于屏幕的刷新速率相对来说较低，这样使得主线程会触发过量的命中测试以及JS代码，使得性能有了没必要是损耗。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(433),alt:"事件淹没了屏幕刷新的时间轴，导致页面很卡顿"}})]),t._v(" "),s("p",[t._v("出于优化的目的，浏览器会合并这些连续的事件，延迟到下一帧渲染是执行，也就是"),s("code",[t._v("requestAnimationFrame")]),t._v("之前。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(434),alt:"和之前相同的事件轴，可是这次事件被合并并延迟调度了"}})]),t._v(" "),s("p",[t._v("而对于非连续性的事件，如keydown，keyup，mousedown，mouseup，touchstart，touchend等，会直接派发给主线程去执行。")]),t._v(" "),s("h3",{attrs:{id:"重绘与回流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重绘与回流"}},[t._v("#")]),t._v(" 重绘与回流")]),t._v(" "),s("p",[t._v("**reflow:**当render树的一部分或者全部因为大小边距等问题发生改变而需要重建的过程，叫做回流")]),t._v(" "),s("p",[t._v("**repaint:**当诸如颜色背景等不会引起页面布局变化，而只需要重新渲染的过程叫做重绘")]),t._v(" "),s("h4",{attrs:{id:"什么会引起回流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么会引起回流"}},[t._v("#")]),t._v(" 什么会引起回流")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("页面渲染初始化")])])]),t._v(" "),s("li",[s("p",[t._v("**DOM结构变化，比如删除了某个节点；**骨头都被打断了，肯定比抽脂更严重，所以会引发回流")])]),t._v(" "),s("li",[s("p",[t._v("**render树变化，比如减少了padding；**也就是进行抽脂手术")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("窗口resize事件触发")])])]),t._v(" "),s("li",[s("p",[t._v("最复杂的一种：获取某些属性，引发回流")]),t._v(" "),s("p",[t._v("很多浏览器会对回流做优化，他会等到足够数量的变化发生，在做一次批处理回流。 "),s("strong",[t._v("但是除了render树的直接变化。")]),t._v(" 当获取一些属性时，浏览器为了获得正确的值也会触发回流。这样就使得浏览器的优化失效了")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("这些属性包括")])]),t._v(" "),s("li",[s("p",[t._v("offsetTop, offsetLeft, offsetWidth, offsetHeight")])]),t._v(" "),s("li",[s("p",[t._v("scrollTop/Left/Width/Height")])]),t._v(" "),s("li",[s("p",[t._v("clientTop/Left/Width/Height")])]),t._v(" "),s("li",[s("p",[t._v("width,height")])]),t._v(" "),s("li",[s("p",[t._v("调用了getComputedStyle(), 或者 IE的 currentStyle")])])])])]),t._v(" "),s("p",[t._v("可使用"),s("strong",[t._v("fastdom")]),t._v("库进行优化，对读写分离")]),t._v(" "),s("p",[t._v("什么情况下：在一些js写的动画场景下，连续读取并更改dom时，会存在布局抖动问题，具体实例可见fastdom的实例")]),t._v(" "),s("p",[t._v("官方使用示例地址："),s("a",{attrs:{href:"http://wilsonpage.github.io/fastdom/examples/animation.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("FastDom: Animation Example (wilsonpage.github.io)"),s("OutboundLink")],1)]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("fastdom")]),t._v("通过批处理DOM读/写操作来消除布局微调。")])]),t._v(" "),s("p",[t._v("通过谷歌开发者工具中的Performance测试官方示例,可明显看出前后的性能对比")]),t._v(" "),s("p",[s("img",{attrs:{src:"image-20210623165458604.png",alt:"image-20210623165458604"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"image-20210623165430252.png",alt:"image-20210623165430252"}})]),t._v(" "),s("h3",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),s("p",[t._v("https://zhuanlan.zhihu.com/p/74792085")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://segmentfault.com/a/1190000022633988",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端都该懂的浏览器工作原理，你懂了吗？ - SegmentFault 思否"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/ithzhang/article/details/7917754",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么浏览器会使用多进程架构"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.im/post/5e182a47e51d453cee48c752",target:"_blank",rel:"noopener noreferrer"}},[t._v("一文看懂Chrome浏览器工作原理"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/102128787",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器多进程架构"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/47407398",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解浏览器的基本工作原理"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developers.google.com/web/updates/2018/09/inside-browser-part2",target:"_blank",rel:"noopener noreferrer"}},[t._v("Inside look at modern web browser (part 2)"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developers.google.com/web/updates/2018/09/inside-browser-part3",target:"_blank",rel:"noopener noreferrer"}},[t._v("Inside look at modern web browser (part 3)"),s("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=a.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{475:function(t,a,r){"use strict";r.r(a);var e=r(19),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"贪心"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#贪心"}},[t._v("#")]),t._v(" 贪心")]),t._v(" "),r("p",[t._v("贪心算法（英语：greedy algorithm），是用计算机来模拟一个“贪心”的人做出决策的过程。这个人十分贪婪，每一步行动总是按某种指标选取最优的操作。而且他目光短浅，总是只看眼前，并不考虑以后可能造成的影响。")]),t._v(" "),r("p",[t._v("可想而知，并不是所有的时候贪心法都能获得最优解，所以一般使用贪心法的时候，都要确保自己能证明其正确性。")]),t._v(" "),r("h2",{attrs:{id:"详细介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#详细介绍"}},[t._v("#")]),t._v(" 详细介绍")]),t._v(" "),r("h3",{attrs:{id:"适用范围"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#适用范围"}},[t._v("#")]),t._v(" 适用范围")]),t._v(" "),r("p",[t._v("贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解。")]),t._v(" "),r("h2",{attrs:{id:"要点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#要点"}},[t._v("#")]),t._v(" 要点")]),t._v(" "),r("h3",{attrs:{id:"常见题型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常见题型"}},[t._v("#")]),t._v(" 常见题型")]),t._v(" "),r("p",[t._v("在提高组难度以下的题目中，最常见的贪心有两种。")]),t._v(" "),r("ul",[r("li",[t._v("「我们将 XXX 按照某某顺序排序，然后按某种顺序（例如从小到大）选择。」。")]),t._v(" "),r("li",[t._v("「我们每次都取 XXX 中最大/小的东西，并更新 XXX。」（有时「XXX 中最大/小的东西」可以优化，比如用优先队列维护）")])]),t._v(" "),r("p",[t._v("二者的区别在于一种是离线的，先处理后选择；一种是在线的，边处理边选择。")]),t._v(" "),r("h3",{attrs:{id:"排序解法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#排序解法"}},[t._v("#")]),t._v(" 排序解法")]),t._v(" "),r("p",[t._v("用排序法常见的情况是输入一个包含几个（一般一到两个）权值的数组，通过排序然后遍历模拟计算的方法求出最优值。")]),t._v(" "),r("h3",{attrs:{id:"后悔解法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#后悔解法"}},[t._v("#")]),t._v(" 后悔解法")]),t._v(" "),r("p",[t._v("思路是无论当前的选项是否最优都接受，然后进行比较，如果选择之后不是最优了，则反悔，舍弃掉这个选项；否则，正式接受。如此往复。")]),t._v(" "),r("h2",{attrs:{id:"区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),r("h3",{attrs:{id:"与动态规划的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#与动态规划的区别"}},[t._v("#")]),t._v(" 与动态规划的区别")]),t._v(" "),r("p",[t._v("贪心算法与动态规划的不同在于它对每个子问题的解决方案都做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。")]),t._v(" "),r("h2",{attrs:{id:"例题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#例题"}},[t._v("#")]),t._v(" 例题")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/tag/greedy/problemset/",target:"_blank",rel:"noopener noreferrer"}},[t._v("贪心算法知识点题库 - 力扣（LeetCode） (leetcode-cn.com)"),r("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=s.exports}}]);